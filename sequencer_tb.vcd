$date
	Fri Aug 09 17:22:27 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1us
$end
$scope module sequencer_tb $end
$var wire 1 ! write_mem $end
$var wire 8 " write_data [7:0] $end
$var wire 1 # read_mem $end
$var wire 1 $ done $end
$var wire 16 % addr [15:0] $end
$var reg 1 & clk $end
$var reg 8 ' mem_data [7:0] $end
$var reg 1 ( reset $end
$scope module sequencer $end
$var wire 1 & clk $end
$var wire 8 ) mem_data [7:0] $end
$var wire 8 * mem_rdata [7:0] $end
$var wire 1 # read_mem $end
$var wire 1 ( reset $end
$var wire 8 + write_data [7:0] $end
$var wire 1 ! write_mem $end
$var wire 8 , z80fi_reg_a_out [7:0] $end
$var wire 8 - z80fi_reg_b_out [7:0] $end
$var wire 8 . z80fi_reg_c_out [7:0] $end
$var wire 8 / z80fi_reg_d_out [7:0] $end
$var wire 8 0 z80fi_reg_e_out [7:0] $end
$var wire 8 1 z80fi_reg_f_out [7:0] $end
$var wire 8 2 z80fi_reg_h_out [7:0] $end
$var wire 8 3 z80fi_reg_i_out [7:0] $end
$var wire 1 4 z80fi_reg_iff1_out $end
$var wire 1 5 z80fi_reg_iff2_out $end
$var wire 16 6 z80fi_reg_ip_out [15:0] $end
$var wire 16 7 z80fi_reg_ix_out [15:0] $end
$var wire 16 8 z80fi_reg_iy_out [15:0] $end
$var wire 8 9 z80fi_reg_l_out [7:0] $end
$var wire 8 : z80fi_reg_r_out [7:0] $end
$var wire 16 ; z80fi_reg_sp_out [15:0] $end
$var wire 16 < z80_reg_sp [15:0] $end
$var wire 8 = z80_reg_r [7:0] $end
$var wire 8 > z80_reg_l2 [7:0] $end
$var wire 8 ? z80_reg_l [7:0] $end
$var wire 16 @ z80_reg_iy [15:0] $end
$var wire 16 A z80_reg_ix [15:0] $end
$var wire 1 B z80_reg_iff2 $end
$var wire 1 C z80_reg_iff1 $end
$var wire 8 D z80_reg_i [7:0] $end
$var wire 8 E z80_reg_h2 [7:0] $end
$var wire 8 F z80_reg_h [7:0] $end
$var wire 8 G z80_reg_f2 [7:0] $end
$var wire 8 H z80_reg_f [7:0] $end
$var wire 8 I z80_reg_e2 [7:0] $end
$var wire 8 J z80_reg_e [7:0] $end
$var wire 8 K z80_reg_d2 [7:0] $end
$var wire 8 L z80_reg_d [7:0] $end
$var wire 8 M z80_reg_c2 [7:0] $end
$var wire 8 N z80_reg_c [7:0] $end
$var wire 8 O z80_reg_b2 [7:0] $end
$var wire 8 P z80_reg_b [7:0] $end
$var wire 8 Q z80_reg_a2 [7:0] $end
$var wire 8 R z80_reg_a [7:0] $end
$var wire 16 S reg2_rdata [15:0] $end
$var wire 16 T reg1_rdata [15:0] $end
$var wire 8 U f_rdata [7:0] $end
$var wire 3 V decoded_len [2:0] $end
$var wire 8 W decoded_group [7:0] $end
$var reg 1 X accept_nmi $end
$var reg 16 Y addr [15:0] $end
$var reg 1 Z block_dec $end
$var reg 1 [ block_inc $end
$var reg 16 \ collected_data [15:0] $end
$var reg 2 ] collected_data_len [1:0] $end
$var reg 1 ^ collected_data_ready $end
$var reg 32 _ collected_insn [31:0] $end
$var reg 3 ` collected_insn_len [2:0] $end
$var reg 1 a collected_insn_ready $end
$var reg 2 b collected_op_len [1:0] $end
$var reg 1 c collected_op_ready $end
$var reg 1 d disable_interrupts $end
$var reg 1 $ done $end
$var reg 1 e enable_interrupts $end
$var reg 8 f f_wdata [7:0] $end
$var reg 1 g f_wr $end
$var reg 8 h i_wdata [7:0] $end
$var reg 1 i i_wr $end
$var reg 3 j insn_len_for_sequencer [2:0] $end
$var reg 16 k insn_operand [15:0] $end
$var reg 32 l instr_for_decoder [31:0] $end
$var reg 1 m mem_rd $end
$var reg 8 n mem_wdata [7:0] $end
$var reg 1 o mem_wr $end
$var reg 16 p next_addr [15:0] $end
$var reg 16 q next_collected_data [15:0] $end
$var reg 2 r next_collected_data_len [1:0] $end
$var reg 1 s next_collected_data_ready $end
$var reg 32 t next_collected_insn [31:0] $end
$var reg 3 u next_collected_insn_len [2:0] $end
$var reg 1 v next_collected_insn_ready $end
$var reg 2 w next_collected_op_len [1:0] $end
$var reg 1 x next_collected_op_ready $end
$var reg 1 y next_done $end
$var reg 1 z next_mem_rd $end
$var reg 8 { next_mem_wdata [7:0] $end
$var reg 1 | next_mem_wr $end
$var reg 4 } next_state [3:0] $end
$var reg 16 ~ next_z80_reg_ip [15:0] $end
$var reg 32 !" next_z80fi_insn [31:0] $end
$var reg 3 "" next_z80fi_insn_len [2:0] $end
$var reg 16 #" next_z80fi_mem_raddr [15:0] $end
$var reg 16 $" next_z80fi_mem_raddr2 [15:0] $end
$var reg 1 %" next_z80fi_mem_rd $end
$var reg 1 &" next_z80fi_mem_rd2 $end
$var reg 8 '" next_z80fi_mem_rdata [7:0] $end
$var reg 8 (" next_z80fi_mem_rdata2 [7:0] $end
$var reg 16 )" next_z80fi_mem_waddr [15:0] $end
$var reg 16 *" next_z80fi_mem_waddr2 [15:0] $end
$var reg 8 +" next_z80fi_mem_wdata [7:0] $end
$var reg 8 ," next_z80fi_mem_wdata2 [7:0] $end
$var reg 1 -" next_z80fi_mem_wr $end
$var reg 1 ." next_z80fi_mem_wr2 $end
$var reg 8 /" next_z80fi_reg_a_in [7:0] $end
$var reg 8 0" next_z80fi_reg_b_in [7:0] $end
$var reg 8 1" next_z80fi_reg_c_in [7:0] $end
$var reg 8 2" next_z80fi_reg_d_in [7:0] $end
$var reg 8 3" next_z80fi_reg_e_in [7:0] $end
$var reg 8 4" next_z80fi_reg_f_in [7:0] $end
$var reg 8 5" next_z80fi_reg_h_in [7:0] $end
$var reg 8 6" next_z80fi_reg_i_in [7:0] $end
$var reg 1 7" next_z80fi_reg_iff1_in $end
$var reg 1 8" next_z80fi_reg_iff2_in $end
$var reg 16 9" next_z80fi_reg_ip_in [15:0] $end
$var reg 16 :" next_z80fi_reg_ix_in [15:0] $end
$var reg 16 ;" next_z80fi_reg_iy_in [15:0] $end
$var reg 8 <" next_z80fi_reg_l_in [7:0] $end
$var reg 8 =" next_z80fi_reg_r_in [7:0] $end
$var reg 16 >" next_z80fi_reg_sp_in [15:0] $end
$var reg 1 ?" next_z80fi_valid $end
$var reg 2 @" op_len_for_decoder [1:0] $end
$var reg 8 A" r_wdata [7:0] $end
$var reg 1 B" r_wr $end
$var reg 5 C" reg1_rnum [4:0] $end
$var reg 5 D" reg2_rnum [4:0] $end
$var reg 16 E" reg_wdata [15:0] $end
$var reg 5 F" reg_wnum [4:0] $end
$var reg 1 G" reg_wr $end
$var reg 1 H" ret_from_nmi $end
$var reg 4 I" state [3:0] $end
$var reg 16 J" z80_reg_ip [15:0] $end
$var reg 32 K" z80fi_insn [31:0] $end
$var reg 3 L" z80fi_insn_len [2:0] $end
$var reg 16 M" z80fi_mem_raddr [15:0] $end
$var reg 16 N" z80fi_mem_raddr2 [15:0] $end
$var reg 1 O" z80fi_mem_rd $end
$var reg 1 P" z80fi_mem_rd2 $end
$var reg 8 Q" z80fi_mem_rdata [7:0] $end
$var reg 8 R" z80fi_mem_rdata2 [7:0] $end
$var reg 16 S" z80fi_mem_waddr [15:0] $end
$var reg 16 T" z80fi_mem_waddr2 [15:0] $end
$var reg 8 U" z80fi_mem_wdata [7:0] $end
$var reg 8 V" z80fi_mem_wdata2 [7:0] $end
$var reg 1 W" z80fi_mem_wr $end
$var reg 1 X" z80fi_mem_wr2 $end
$var reg 8 Y" z80fi_reg_a_in [7:0] $end
$var reg 8 Z" z80fi_reg_b_in [7:0] $end
$var reg 8 [" z80fi_reg_c_in [7:0] $end
$var reg 8 \" z80fi_reg_d_in [7:0] $end
$var reg 8 ]" z80fi_reg_e_in [7:0] $end
$var reg 8 ^" z80fi_reg_f_in [7:0] $end
$var reg 8 _" z80fi_reg_h_in [7:0] $end
$var reg 8 `" z80fi_reg_i_in [7:0] $end
$var reg 1 a" z80fi_reg_iff1_in $end
$var reg 1 b" z80fi_reg_iff2_in $end
$var reg 16 c" z80fi_reg_ip_in [15:0] $end
$var reg 16 d" z80fi_reg_ix_in [15:0] $end
$var reg 16 e" z80fi_reg_iy_in [15:0] $end
$var reg 8 f" z80fi_reg_l_in [7:0] $end
$var reg 8 g" z80fi_reg_r_in [7:0] $end
$var reg 16 h" z80fi_reg_sp_in [15:0] $end
$var reg 1 i" z80fi_valid $end
$scope module instr_decoder $end
$var wire 32 j" instr [31:0] $end
$var wire 2 k" op_len [1:0] $end
$var reg 8 l" group [7:0] $end
$var reg 3 m" len [2:0] $end
$upscope $end
$scope module ir_registers $end
$var wire 1 X accept_nmi $end
$var wire 1 & clk $end
$var wire 1 d disable_interrupts $end
$var wire 1 e enable_interrupts $end
$var wire 8 n" i_in [7:0] $end
$var wire 1 i i_wr $end
$var wire 8 o" r_in [7:0] $end
$var wire 1 B" r_wr $end
$var wire 8 p" reg_i [7:0] $end
$var wire 8 q" reg_r [7:0] $end
$var wire 1 ( reset $end
$var wire 1 H" ret_from_nmi $end
$var reg 8 r" _i [7:0] $end
$var reg 8 s" _r [7:0] $end
$var reg 1 C iff1 $end
$var reg 1 B iff2 $end
$upscope $end
$scope module registers $end
$var wire 1 Z block_dec $end
$var wire 1 [ block_inc $end
$var wire 1 & clk $end
$var wire 5 t" dest [4:0] $end
$var wire 8 u" f_in [7:0] $end
$var wire 1 g f_wr $end
$var wire 1 v" f_wr2 $end
$var wire 16 w" in [15:0] $end
$var wire 1 ( reset $end
$var wire 5 x" src1 [4:0] $end
$var wire 5 y" src2 [4:0] $end
$var wire 1 G" write_en $end
$var wire 1 z" write_en2 $end
$var wire 16 {" z80_reg_ix [15:0] $end
$var wire 16 |" z80_reg_iy [15:0] $end
$var wire 16 }" z80_reg_sp [15:0] $end
$var wire 8 ~" z80_reg_l2 [7:0] $end
$var wire 8 !# z80_reg_l [7:0] $end
$var wire 8 "# z80_reg_h2 [7:0] $end
$var wire 8 ## z80_reg_h [7:0] $end
$var wire 8 $# z80_reg_f2 [7:0] $end
$var wire 8 %# z80_reg_f [7:0] $end
$var wire 8 &# z80_reg_e2 [7:0] $end
$var wire 8 '# z80_reg_e [7:0] $end
$var wire 8 (# z80_reg_d2 [7:0] $end
$var wire 8 )# z80_reg_d [7:0] $end
$var wire 8 *# z80_reg_c2 [7:0] $end
$var wire 8 +# z80_reg_c [7:0] $end
$var wire 8 ,# z80_reg_b2 [7:0] $end
$var wire 8 -# z80_reg_b [7:0] $end
$var wire 8 .# z80_reg_a2 [7:0] $end
$var wire 8 /# z80_reg_a [7:0] $end
$var wire 8 0# reg_f [7:0] $end
$var reg 16 1# _af [15:0] $end
$var reg 16 2# _af2 [15:0] $end
$var reg 16 3# _bc [15:0] $end
$var reg 16 4# _bc2 [15:0] $end
$var reg 16 5# _de [15:0] $end
$var reg 16 6# _de2 [15:0] $end
$var reg 16 7# _hl [15:0] $end
$var reg 16 8# _hl2 [15:0] $end
$var reg 16 9# _ix [15:0] $end
$var reg 16 :# _iy [15:0] $end
$var reg 16 ;# _sp [15:0] $end
$var reg 16 <# out1 [15:0] $end
$var reg 16 =# out2 [15:0] $end
$upscope $end
$scope task task_block_dec $end
$upscope $end
$scope task task_block_inc $end
$upscope $end
$scope task task_collect_data $end
$var reg 2 ># local_n [1:0] $end
$upscope $end
$scope task task_done $end
$upscope $end
$scope task task_read_mem $end
$var reg 16 ?# local_addr [15:0] $end
$var reg 2 @# local_n [1:0] $end
$upscope $end
$scope task task_read_reg $end
$var reg 2 A# local_n [1:0] $end
$var reg 5 B# local_rnum [4:0] $end
$upscope $end
$scope task task_write_f $end
$var reg 8 C# local_data [7:0] $end
$upscope $end
$scope task task_write_i $end
$var reg 8 D# local_data [7:0] $end
$upscope $end
$scope task task_write_mem $end
$var reg 16 E# local_addr [15:0] $end
$var reg 8 F# local_data [7:0] $end
$var reg 2 G# local_n [1:0] $end
$upscope $end
$scope task task_write_mem_done $end
$var reg 2 H# local_n [1:0] $end
$upscope $end
$scope task task_write_r $end
$var reg 8 I# local_data [7:0] $end
$upscope $end
$scope task task_write_reg $end
$var reg 16 J# local_data [15:0] $end
$var reg 5 K# local_wnum [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx K#
bx J#
bx I#
bx H#
bx G#
bx F#
bx E#
bx D#
bx C#
bx B#
bx A#
bx @#
bx ?#
bx >#
b0 =#
b0 <#
b0 ;#
b0 :#
b0 9#
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
b0 ##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
b0 {"
0z"
b0 y"
b0 x"
b0 w"
0v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
b10 m"
b11111110 l"
b1 k"
b11101101 j"
0i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
0b"
0a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
0X"
0W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
0P"
0O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
0H"
0G"
b0 F"
b0 E"
b0 D"
b0 C"
0B"
b0 A"
b1 @"
0?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
08"
07"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
0."
0-"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
0&"
0%"
b0 $"
b0 #"
b0 ""
b0 !"
b1 ~
b0 }
0|
b0 {
1z
0y
0x
b1 w
0v
b1 u
b11101101 t
xs
bx r
b0 q
b1 p
0o
b0 n
1m
b11101101 l
bx k
b1 j
0i
b0 h
0g
b0 f
0e
0d
0c
b0 b
0a
b0 `
b0 _
0^
b0 ]
b0 \
0[
0Z
b0 Y
0X
b11111110 W
b10 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
0C
0B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
05
04
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b11101101 *
b11101101 )
1(
b11101101 '
0&
b0 %
0$
1#
b0 "
0!
$end
#1
1&
#2
1z
b1 ~
b1 p
b1 w
b11101101 t
b1 u
0&
0(
#3
1%"
b0 ?#
b1 @#
b1010 C"
b1010 x"
b1010 B#
b1 A#
1v
1x
b100001 W
b100001 l"
b0 ""
b0 !"
0?"
0y
b0 k
b1 }
b10 j
b10 @"
b10 k"
b10 ~
b0 p
b1011000011101101 l
b1011000011101101 j"
1z
b10 w
b1011000011101101 t
b10 u
b10110000 *
b10110000 '
b10110000 )
b1 6
b1 J"
bx ]
x^
b1 b
b1 `
b11101101 _
b1 %
b1 Y
1&
#4
0&
#5
1[
b11101101 {
1|
b11101101 F#
b0 E#
b1 G#
b1001 B#
b11101101 '"
b11101101 q
b1 >#
b10 }
0z
1x
b10 w
1v
b1011000011101101 t
b10 u
b1001 C"
b1001 x"
b11101101 *
b11101101 '
b11101101 )
1O"
b1 I"
b10 6
b10 J"
b10 b
1c
1a
b10 `
b1011000011101101 _
b0 %
b0 Y
1&
#6
0&
#7
b100 1
b100 H
b100 %#
b100 U
b100 0#
b11111111 -
b11111111 P
b11111111 -#
b11111111 .
b11111111 N
b11111111 +#
b1 9
b1 ?
b1 !#
b11111111 S
b11111111 =#
b11111111 T
b11111111 <#
b1 0
b1 J
b1 '#
b10 ""
b1011000011101101 !"
1?"
1z
b0 q
1y
b0 ~
b11101101 +"
1-"
b1 H#
b0 }
0x
b0 w
0v
b1011000011101101 t
b0 u
0[
b0 C"
b0 x"
b0 {
0|
b100 1#
b1111111111111111 3#
b1 7#
b1 5#
b11101101 Q"
b10 I"
b11101101 \
b11101101 "
b11101101 +
b11101101 n
1!
1o
0#
0m
1&
#8
0&
#9
b11111110 W
b11111110 l"
0x
b1 w
b1 u
b1 j
b1 @"
b1 k"
b1 ~
b1 p
b11101101 l
b11101101 j"
1z
b11101101 t
0y
b100 4"
b1 <"
b1 3"
b11111111 1"
b11111111 0"
b0 +"
0-"
b0 '"
0%"
b0 ""
b0 !"
0?"
b11101101 U"
1W"
b10 L"
b1011000011101101 K"
1i"
b0 I"
b0 6
b0 J"
b0 \
b0 b
0c
0a
b0 `
b0 "
b0 +
b0 n
0!
0o
1#
1m
1$
1&
#10
0&
